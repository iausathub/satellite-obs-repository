# This workflow will build and push a new container image to Amazon ECR,
# and then will force a new deployment of the service containing the app,
# when there is a push to the "develop" branch.

name: Deploy to Amazon ECS - Dev.

on:
  release:
    types: [ published ]
    branches: [ develop ]

  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: score
  ECS_SERVICE: score-test-2
  ECS_CLUSTER: score-cluster
  ECS_TASK_DEFINITION: score-test-td
  CONTAINER_NAME: score-app

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: test

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: develop

    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: test
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg="SETTINGS=score.settings.test" .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


    - name: Force service deployment
      run: |
        aws ecs update-service --cluster  ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
